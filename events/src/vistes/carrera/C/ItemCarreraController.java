package vistes.carrera.C;

import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceDialog;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import java.util.Collections;
import java.util.List;
import java.util.Optional;



import dao.DaoCorredor;
import dao.DaoInscripcio;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.Alert.AlertType;
import vistes.carrera.M.Carrera_Model;
import vistes.corredor.M.Corredor_Model;
import vistes.home.C.HomeController;
import vistes.inscripcio.M.Inscripcio_Model;

public class ItemCarreraController {
	@FXML
	private Label nom;
	@FXML
	private Label participants;
	@FXML
	private Label preu;
	@FXML
	private Label localitat;
	@FXML
	private Label dia;
	@FXML
	private Label mes;
	@FXML
	private Label any;
	@FXML
	private Button posicioB;
	@FXML
	private Button corredorB;
	@FXML
	private Button editB;
	@FXML
	private Button delB;
	@FXML
	private Button inscriureB;
	HomeController GestorVentanas = null;
	Carrera_Model carrera;
	private ChoiceDialog<String> dialog;
	private List<String> dialogData;
	private List<Corredor_Model> lCorredor;
	private List<Inscripcio_Model> lInscripcions;

	// gestor de finestres
	public void setGestorVentanas(HomeController homeController, Carrera_Model carrera) {
		this.GestorVentanas = homeController;
		this.carrera = carrera;
		System.out.println(this.GestorVentanas.modeloLogin);
		this.load();
		
		if (this.GestorVentanas.modeloLogin.tipus.equals("corredor")) {
			this.corredorB.setVisible(false);
			this.posicioB.setVisible(false);
			this.editB.setVisible(false);
			this.delB.setVisible(false);

		}
		if (LocalDate.now().isBefore(carrera.getData()))
			this.posicioB.setDisable(true);
		if (LocalDate.now().isAfter(carrera.getData()))
			this.inscriureB.setDisable(true);
				
	}

	private void load() {

		this.nom.setText(carrera.nom);
		this.participants.setText("" + carrera.getNParticipants());
		this.preu.setText("" + carrera.preu + " €");
		this.localitat.setText(carrera.localitat);
		String dia = carrera.data.format(DateTimeFormatter.ofPattern("dd"));
		String mes = carrera.data.format(DateTimeFormatter.ofPattern("LLLL"));
		String any = carrera.data.format(DateTimeFormatter.ofPattern("yyyy"));

		this.dia.setText(dia);
		this.mes.setText(mes);
		this.any.setText(any);
	}

	@FXML
	public void initialize() {

	}

	// Event Listener on Button[#editB].onAction
	@FXML
	public void edit(ActionEvent event) {
		// TODO Autogenerated
		this.GestorVentanas.modCarrera(this.carrera);
	}

	// Event Listener on Button[#delB].onAction
	@FXML
	public void del(ActionEvent event) {
		// TODO Autogenerated
		carrera.del(this.carrera);
		this.GestorVentanas.loadCorredor();
	}

	// Event Listener on Button.onAction
	@FXML
	public void inscriure(ActionEvent event) {
		// TODO Autogenerated
		
		if (this.GestorVentanas.modeloLogin.getTipus().equals("corredor")) {

			this.lInscripcions = DaoInscripcio.getByCarrera("" + this.carrera.getId());
			boolean esta = false;
			Corredor_Model corredor = this.GestorVentanas.modeloLogin.getCorredor();
			for (Inscripcio_Model ins : this.lInscripcions) {
				if (ins.getCorredor().getDni().equals(corredor.getDni())) {
					esta = true;
					break;
				}

			}

			if (esta) {
				this.alert("Error a les inscripcions", null, "Aquest corredor ja té una inscripció a aquesta carrera");
			} else {
				Inscripcio_Model inscripcio = new Inscripcio_Model();

				inscripcio.setCarrera(this.carrera);
				inscripcio.setCorredor(corredor);
				inscripcio.setPosicio(0);
				inscripcio.setDataInscripcio(LocalDate.now());
				if (corredor.getClub() != null)
					inscripcio.setNif(corredor.getClub());

				inscripcio = this.addDorsal(inscripcio);
				if (inscripcio != null) {
					System.out.println(inscripcio.dorsal + "-" + inscripcio.id);
					inscripcio.Add(inscripcio);
					this.carrera.NParticipants += 1;
					this.carrera.Add(this.carrera);
					this.alert("Inscripció:", this.carrera.getNom(), "Inscripció guaradada correctament");
				}

			}

		} else

		{

			List<String> llistaNoms = new ArrayList<>();
			this.lCorredor = DaoCorredor.getAll();
			this.lInscripcions = DaoInscripcio.getByCarrera("" + this.carrera.getId());
			boolean esta = false;

			for (Corredor_Model c : this.lCorredor) {
				for (Inscripcio_Model ins : this.lInscripcions) {
					if (ins.getCorredor().getDni().equals(c.getDni())) {
						esta = true;
						if (ins.getCarrera().getId() != this.carrera.getId()) {
							llistaNoms.add(c.getNomcomplet());
						}
					}

				}
				if (!esta) {
					llistaNoms.add(c.getNomcomplet());

				}
				esta = false;
			}
			if (llistaNoms.size() == 0) {
				this.alert("Error a les inscripcions", null, "Tots els corredors ja estan inscrits a aquesta carrera");
			} else {
				dialogData = llistaNoms;
				dialog = new ChoiceDialog<String>(dialogData.get(0), dialogData);
				dialog.setTitle("Corredors");
				dialog.setHeaderText("Seleccion un corredor");

				Optional<String> result = dialog.showAndWait();
				String selected = "cancelled.";

				if (result.isPresent()) {
					selected = result.get();
				}
				if (selected != "cancelled") {
					for (Corredor_Model c : this.lCorredor) {
						if (c.getNomcomplet().equals(selected)) {
							Inscripcio_Model inscripcio = new Inscripcio_Model();

							inscripcio.setCarrera(this.carrera);
							inscripcio.setCorredor(c);
							inscripcio.setPosicio(0);
							inscripcio.setDataInscripcio(LocalDate.now());
							if (c.getClub() != null)
								inscripcio.setNif(c.getClub());

							inscripcio = this.addDorsal(inscripcio);
							if (inscripcio != null) {
								System.out.println(inscripcio.dorsal + "-" + inscripcio.id);
								inscripcio.Add(inscripcio);
								this.carrera.NParticipants += 1;
								this.carrera.Add(this.carrera);
								this.alert("Inscripció:", selected, "Inscripció guaradada correctament");
							}
						}
					}
				}
			}
		}
	}

	public Inscripcio_Model addDorsal(Inscripcio_Model inscripcio) {
		Inscripcio_Model model = new Inscripcio_Model();
		inscripcio.setDorsal(model.getLastDorsal()+1);
		return inscripcio;
		// The Java 8 way to get the response value (with lambda expression).

	}

	@FXML
	public void corredorsPosicio() {
		this.GestorVentanas.titol.setText("CORREDORS PER POSICIÓ A "+this.carrera.getNom());
		Carrera_Model model = new Carrera_Model();
		this.GestorVentanas.carreres = model.load();
		Inscripcio_Model modelIns = new Inscripcio_Model();
		this.GestorVentanas.inscripcions = modelIns.getByCarrera("" + this.carrera.getId());
		List<Corredor_Model> temp = new ArrayList<Corredor_Model>();
		Collections.sort(this.GestorVentanas.inscripcions);
		for (Inscripcio_Model ins : this.GestorVentanas.inscripcions) {
			if (this.carrera.getId() == ins.getCarrera().getId())
				for (Corredor_Model corredor : this.GestorVentanas.corredors) {
					if (ins.getCorredor().getDni().equals(corredor.getDni())) {
						temp.add(corredor);
					}
				}
		}
		this.GestorVentanas.corredors = temp;
		this.GestorVentanas.showCorredorInscritsCarrera();

	}

	@FXML
	public void corredorsInscrits() {
		this.GestorVentanas.titol.setText("CORREDORS INSCRITS A "+this.carrera.getNom());
		Carrera_Model modelCarrera = new Carrera_Model();
		this.GestorVentanas.carreres = modelCarrera.load();

		Inscripcio_Model modelIns = new Inscripcio_Model();
		this.GestorVentanas.inscripcions = modelIns.getByCarrera("" + this.carrera.getId());
		Corredor_Model model = new Corredor_Model();
		this.GestorVentanas.corredors = model.load();

		List<Corredor_Model> temp = new ArrayList<Corredor_Model>();

		for (Inscripcio_Model ins : this.GestorVentanas.inscripcions) {
			if (this.carrera.getId() == ins.getCarrera().getId())
				for (Corredor_Model corredor : this.GestorVentanas.corredors) {
					if (ins.getCorredor().getDni().equals(corredor.getDni())) {
						temp.add(corredor);
					}
				}
		}

		this.GestorVentanas.corredors = temp;
		this.GestorVentanas.showCorredor();

	}

	public void alert(String title, String header, String content) {
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setTitle(title);
		alert.setHeaderText(header);
		alert.setContentText(content);
		alert.showAndWait();
	}
}
